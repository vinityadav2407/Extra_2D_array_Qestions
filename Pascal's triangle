/*You are given an integer N. Your task is to print the pascal’s triangle till the row N.
A Pascal's triangle is a triangular array constructed by summing adjacent elements in preceding rows. Pascal's triangle contains the values of the binomial coefficient. For example in the figure below.


For example, given integer N= 4 then you have to print.
1  
1 1 
1 2 1 
1 3 3 1

Here for the third row, you will see that the second element is the summation of the above two-row elements i.e. 2=1+1, and similarly for row three 3 = 1+2 and 3 = 1+2.
Input format :
The first line of input contains an integer ‘T’ denoting the number of test cases.
The first line of each test case contains a single integer N denoting the row till which you have to print the pascal’s triangle.
Output format :
For each test case, return the 2-D array/list containing the pascal’s triangle till the row N.
Note:
You do not need to print anything; it has already been taken care of. Just implement the given function.
Solution-->>>
*/
import java.util.*;

public class Solution {
    // Function to calculate binomial coefficient (nCk)
    public static int binomialCoeff(int n, int k) {
        if (k > n - k) {
            k = n - k; // Take advantage of symmetry
        }
        int res = 1;
        for (int i = 0; i < k; i++) {
            res *= (n - i);
            res /= (i + 1);
        }
        return res;
    }

    public static void printPascalsTriangle(int N) {
        for (int i = 0; i < N; i++) {
            // Print spaces to align the triangle
            for (int j = 0; j < N - i - 1; j++) {
                System.out.print(" ");
            }
            // Print the elements of the ith row
            for (int k = 0; k <= i; k++) {
                System.out.print(binomialCoeff(i, k) + " ");
            }
            System.out.println(); // Move to the next line
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();

        // Print Pascal's Triangle
        printPascalsTriangle(N);

        sc.close();
    }
}
